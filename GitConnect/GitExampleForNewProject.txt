#First Time Usage if GitHub


Check the ssh agent is running type
val $(ssh-agent -s)


Create An Account With Github create the project and select ssh to authenticate
On the Local Machine create an ssh key pair


go to the ~/.ssh directory
cd ~/.ssh


Type the command below
ssh-keygen -t rsa -b 4096 -C "personalemail@anemailprovider.com"


If you get errors cd into another directory and re-try the commmand


Give the Key The Name of the Project for its Name
Add a password ideally 13 chars with capital letters numbers and symbols
DO NOT LOSE THE PASSWORD CREDENTIALS.


Make sure the key pair is copied to the ~/.ssh directory
Go to the ~/.ssh directory and look for the new key pair
one of the certificates is the public key. It will have a .pub extension


Type cat nameofkey.pub


Copy the entire key contents to a notepad app or a terminal editor
go to github and add the public key copying the contents you have in the notepad 
app or terminal editor. All Steps Below can now be carried out on the Local Machine
 
On the Local Machine Follow these steps below.


#Create A Configuration File
You could just type this command in each time you want 
to check in a change into github 


ssh-add ~/.ssh/theprivatekeyname


However this requires you to remember to type this 
and the key password every time. A better wat is to
create a config file so lets do that


go to the ~/.ssh directory and type
touch config 
Now open the config file in your chosen editor


Use the example below to create a configuration file
the idea behind this is so the system will recognise the website and
the private key automatically. Note the details may vary if you 
are using windows type cd ~/.ssh then type pwd and copy the path name
in the section where it says IdentityFile


#Config Example


#Github
Host github.com
      user git
      Hostname github.com
      PreferredAuthentications publickey
      IdentityFile /home/user/.ssh/sshprivatekeyname


Now We can Start Creating Scripts


#Accessing new GitHub Repository and cloning it


The first thing we want to do is to clone the repository
of the gihub project create a folder for all of your Git Projects
cd into that folder now we can type the command below.


git clone git@github.com:projectname/NameofProject.git


Now  we can check a few things in git. Type the command below


git status


The git status command can be run at any time it will tell us
if there is anything happening if there are files missing
or new changes to add. Feel free to run it at any time.


Below is the output of the git status command on its first run.


----------------------------------------------
On branch main
Your branch is up to date with 'origin/main'.


nothing to commit, working tree clean
----------------------------------------------


Before we can start syncing anything we'll need 
to setup the main branch.


To sync things up properly with the main branch use type the commands below.


git config --global user.email "personalemail@emailprovider"
git config --global user.name "Your Name"


Lets now add a test file to the main repository we can remove it any time


touch testfile.txt


Type the command below. 
This will add all files we have in our folder that are new. 


git add .


We can also use (git add somefile) to add a single file


Now we need to commit the change Type the command below. 
The command adds two comments one a short one and one a long one.


git commit -m "Added a testfile.txt" -m "This is our first file to push to git from my machine - First Commit"


To push the file into the main branch we need to type the following below.


On the first run you will need to type the following below.


git push --set-upstream origin main


After this we can use the command below each time we want
to push a change to the main branch.


git push origin main


This will push the file to the main respository


Now lets open up our testfile.txt in our text editor and change a line.
Save the file and type the following.


git commit -am "Added a New Line"


For files that exist we don't need to add lots of information we can just add
a single comment note the use of -am in the command this signifies we are adding
an ammendment.


Now lets login to github and check we should see a new file in our repository called
testfile.txt


Before we go any further its time to create a new branch. Type the command below.


git branch


You will see the output below. 


----------------------------------------------
* main
----------------------------------------------


This means we only have ONE Branch NOT GOOD
we want to have branch to run and test our code this is the safest way to 
ensure we have well tested code that doesn't leak into our main/master branch 
the main branch is where we will keep all of our main code so we want it 
to be rock solid and working.


Lets create a new branch type the following below.


git checkout -b Testing


This will cause Git to create a new branch
and then switch to it.


---------------------------------------------------------
Switched to a new branch 'Testing'
--------------------------------------------------------


Now we are in our testing branch and can make changes
without fear of harming our main branch.


If for any reason we want to switch back to the main branch
we can just type the following.


git checkout main


To switch to the testing branch we can just type


git checkout Testing


Lets now take our testing file and make another amendment. 
Open the file testfile.txt in your editor of choice and add
a new line. Save the file.


Use the git status command to check the status


As you can see the file exists but it shows having been
amended. You can now commit the change. Type the following below. 


git commit -am "Added Another New Line"


Now lets push this change to github under the Testing Branch
As this is a new Branch you will need to run the following


git push --set-upstream origin Testing


After that command you can use git push to push the changes


Lets now switch back to the main branch and check the testing file.
Type the following below.


git checkout main


Open up the file testfile.txt into your editor of choice
Note: You will see there is a difference now between this file 
and the file in the Testing branch.


To Check the exact differences you can run the command below.


git diff Testing


The lines shown will show you the differences.
This proves we can create multiple to changes to the same file
under different branchs part of the magic of Git.


To merge the changes we can use the git merge command HOWEVER
This IS NOT ADVISED. The whole point of using Github is to have the
ability to track changes if we just used Git we could use the following 


git merge Testing 


As long as we're in the  main branch. Now Git will complain asking for a comment 
but we can do things that way IF we want. This will make the main branch
have the Testing Branch changes HOWEVER this is only done locally.


We would still need to run the following.


git push 


Under the main branch to sync the changes to github.


THE BETTER WAY. The better way is to check the following command


git diff Testing


See the changes then login to Github and look for a Pull Request
Github will detect that we have these differences and within the website
we can make a few comments initiate a Pull request and then merge
into the main branch that way. You can then and should DELETE the Testing
Branch in Github.


This process is much safer and allows us to keep
Github to be in control of all our changes. 


The other way will mean any user would control merge requests locally
that leads to a lot of problems especially if more than one person is
involved in the project.


Now we have completed a pull request in GitHub and merged the change
into the main branch our Local Branch for main is out of sync
We can easily solve this. Type the following commands.


git checkout main
git pull


The git checkout main ensures we're on the proper branch locally 
we use the git pull command to pull changes made from Github to our
local main branch. After this change both the local branch and Github
branch for main are now in sync.


The final Step is to do the following.
We need to remove the Testing Branch Locally so lets do that.
Run the command below.


git branch -D Testing


Last and Final Thoughts.
After You're testing is completed to continue working on this project


A good rule to follow is to use the below commands each time a new branch is created
Lets say you wanted to create a new Testing Branch Called Dev
You create the Branch but it may not be in sync with the main (default) branch files
To make sure it is we do these steps.


git checkout main
git pull
git checkout Dev
git merge main
git diff main


Using git checkout main we go back to the main branch and then run the git pull
command this keeps our local main branch in sync with the Github main branch.


The git checkout Dev ensures we're on the correct branch locally and the git merge main
command ensures we are in sync with main changes. The git diff command is just a precaution.
it ensures we're checking against the main branch expecting no changes to appear.


If we don't follow these steps we'll increase the chances we're out of sync with main.
We might find for example after checking that our intended changes have already been done.